{"ast":null,"code":"var _jsxFileName = \"C:\\\\PwC Assignment\\\\pwcassignment\\\\src\\\\test.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport './test.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet timer;\nfunction GeocodingForm() {\n  _s();\n  const [isLoading, setIsLoading] = useState(false);\n  const [address, setAddress] = useState('');\n  const [suggestions, setSuggestions] = useState([]);\n  const [longitude, setLongitude] = useState(null);\n  const [latitude, setLatitude] = useState(null);\n  function handleSubmit(event) {\n    event.preventDefault();\n    clearTimeout(timer);\n    timer = setTimeout(async () => {\n      // Make a request to the PositionStack Geocoding API\n      const response = await axios.get('http://api.positionstack.com/v1/forward', {\n        params: {\n          query: address,\n          access_key: 'f27595405146e81b0cc5bdb9ebb81552'\n        }\n      });\n\n      // Get the suggestions from the API\n      const suggestions = response.data.data;\n\n      // Update the state with the suggestions\n      setSuggestions(suggestions);\n    }, 500);\n  }\n  function handleSuggestionClick(suggestion) {\n    setAddress(suggestion.label);\n    // Store the longitude and latitude of the suggestion\n    setLongitude(suggestion.longitude);\n    setLatitude(suggestion.latitude);\n\n    // Clear the address and suggestions\n    setSuggestions([]);\n  }\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"address\",\n      children: \"Address:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 48\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      id: \"address\",\n      name: \"address\",\n      value: address,\n      onChange: event => {\n        setAddress(event.target.value);\n        handleSubmit(event);\n      },\n      placeholder: \"Enter an address\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      children: \"Search\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), suggestions.length > 0 && /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: suggestions.map(suggestion => /*#__PURE__*/_jsxDEV(\"li\", {\n        onClick: () => handleSuggestionClick(suggestion),\n        children: suggestion.label\n      }, suggestion.latitude, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n}\n_s(GeocodingForm, \"Qt0AufBBXE55JzxEFDc+/RivJQw=\");\n_c = GeocodingForm;\nexport default GeocodingForm;\nvar _c;\n$RefreshReg$(_c, \"GeocodingForm\");","map":{"version":3,"names":["React","useState","axios","timer","GeocodingForm","isLoading","setIsLoading","address","setAddress","suggestions","setSuggestions","longitude","setLongitude","latitude","setLatitude","handleSubmit","event","preventDefault","clearTimeout","setTimeout","response","get","params","query","access_key","data","handleSuggestionClick","suggestion","label","target","value","length","map"],"sources":["C:/PwC Assignment/pwcassignment/src/test.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport axios from 'axios';\r\nimport './test.css';\r\nlet timer;\r\n\r\nfunction GeocodingForm() {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [address, setAddress] = useState('');\r\n  const [suggestions, setSuggestions] = useState([]);\r\n  const [longitude, setLongitude] = useState(null);\r\n  const [latitude, setLatitude] = useState(null);\r\n\r\n   function handleSubmit(event) {\r\n    event.preventDefault();\r\n    \r\n    clearTimeout(timer);\r\n    timer = setTimeout(async () => {\r\n         // Make a request to the PositionStack Geocoding API\r\n    const response = await axios.get('http://api.positionstack.com/v1/forward', {\r\n        params: {\r\n          query: address,\r\n          access_key: 'f27595405146e81b0cc5bdb9ebb81552'\r\n        }\r\n      });\r\n  \r\n      // Get the suggestions from the API\r\n      const suggestions = response.data.data;\r\n  \r\n      // Update the state with the suggestions\r\n      setSuggestions(suggestions);\r\n    }, 500);\r\n   \r\n  }\r\n\r\n  function handleSuggestionClick(suggestion) {\r\n    setAddress(suggestion.label)\r\n    // Store the longitude and latitude of the suggestion\r\n    setLongitude(suggestion.longitude);\r\n    setLatitude(suggestion.latitude);\r\n\r\n    // Clear the address and suggestions\r\n    setSuggestions([]);\r\n  }\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <label htmlFor=\"address\">Address:</label><br />\r\n      <input type=\"text\" id=\"address\" name=\"address\" value={address} onChange={event => {setAddress(event.target.value); handleSubmit(event);}} placeholder=\"Enter an address\" />\r\n      <button type=\"submit\">Search</button>\r\n      {suggestions.length > 0 && (\r\n        <ul>\r\n          {suggestions.map(suggestion => (\r\n            <li key={suggestion.latitude} onClick={() => handleSuggestionClick(suggestion)}>\r\n              {suggestion.label}\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      )}\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default GeocodingForm;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAO,YAAY;AAAC;AACpB,IAAIC,KAAK;AAET,SAASC,aAAa,GAAG;EAAA;EACvB,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGL,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAACM,OAAO,EAAEC,UAAU,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACQ,WAAW,EAAEC,cAAc,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAACU,SAAS,EAAEC,YAAY,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;EAChD,MAAM,CAACY,QAAQ,EAAEC,WAAW,CAAC,GAAGb,QAAQ,CAAC,IAAI,CAAC;EAE7C,SAASc,YAAY,CAACC,KAAK,EAAE;IAC5BA,KAAK,CAACC,cAAc,EAAE;IAEtBC,YAAY,CAACf,KAAK,CAAC;IACnBA,KAAK,GAAGgB,UAAU,CAAC,YAAY;MAC1B;MACL,MAAMC,QAAQ,GAAG,MAAMlB,KAAK,CAACmB,GAAG,CAAC,yCAAyC,EAAE;QACxEC,MAAM,EAAE;UACNC,KAAK,EAAEhB,OAAO;UACdiB,UAAU,EAAE;QACd;MACF,CAAC,CAAC;;MAEF;MACA,MAAMf,WAAW,GAAGW,QAAQ,CAACK,IAAI,CAACA,IAAI;;MAEtC;MACAf,cAAc,CAACD,WAAW,CAAC;IAC7B,CAAC,EAAE,GAAG,CAAC;EAET;EAEA,SAASiB,qBAAqB,CAACC,UAAU,EAAE;IACzCnB,UAAU,CAACmB,UAAU,CAACC,KAAK,CAAC;IAC5B;IACAhB,YAAY,CAACe,UAAU,CAAChB,SAAS,CAAC;IAClCG,WAAW,CAACa,UAAU,CAACd,QAAQ,CAAC;;IAEhC;IACAH,cAAc,CAAC,EAAE,CAAC;EACpB;EAEA,oBACE;IAAM,QAAQ,EAAEK,YAAa;IAAA,wBAC3B;MAAO,OAAO,EAAC,SAAS;MAAA,UAAC;IAAQ;MAAA;MAAA;MAAA;IAAA,QAAQ;MAAA;MAAA;MAAA;IAAA,QAAM,eAC/C;MAAO,IAAI,EAAC,MAAM;MAAC,EAAE,EAAC,SAAS;MAAC,IAAI,EAAC,SAAS;MAAC,KAAK,EAAER,OAAQ;MAAC,QAAQ,EAAES,KAAK,IAAI;QAACR,UAAU,CAACQ,KAAK,CAACa,MAAM,CAACC,KAAK,CAAC;QAAEf,YAAY,CAACC,KAAK,CAAC;MAAC,CAAE;MAAC,WAAW,EAAC;IAAkB;MAAA;MAAA;MAAA;IAAA,QAAG,eAC3K;MAAQ,IAAI,EAAC,QAAQ;MAAA,UAAC;IAAM;MAAA;MAAA;MAAA;IAAA,QAAS,EACpCP,WAAW,CAACsB,MAAM,GAAG,CAAC,iBACrB;MAAA,UACGtB,WAAW,CAACuB,GAAG,CAACL,UAAU,iBACzB;QAA8B,OAAO,EAAE,MAAMD,qBAAqB,CAACC,UAAU,CAAE;QAAA,UAC5EA,UAAU,CAACC;MAAK,GADVD,UAAU,CAACd,QAAQ;QAAA;QAAA;QAAA;MAAA,QAG7B;IAAC;MAAA;MAAA;MAAA;IAAA,QAEL;EAAA;IAAA;IAAA;IAAA;EAAA,QACI;AAEX;AAAC,GAvDQT,aAAa;AAAA,KAAbA,aAAa;AAyDtB,eAAeA,aAAa;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}